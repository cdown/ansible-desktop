---
- name: Install pyenv
  aur: name=pyenv skip_installed=yes
  become: yes
  become_user: makepkg

- name: Get active Python installed in pyenv
  shell: "cat ~/.pyenv/version"
  register: pyenv_version
  become: yes
  become_user: "{{ user }}"
  changed_when: false

- copy: src=files/bin/pyenv-check-rebuild-needed dest=/usr/local/bin/pyenv-check-rebuild-needed mode=755
- copy: src=files/bin/pyenv-init-full dest=/usr/local/bin/pyenv-init-full mode=755

- name: Check if Python needs a rebuild for dynamic lib update
  command: pyenv-check-rebuild-needed
  become: yes
  become_user: "{{ user }}"
  register: python_needs_force_rebuild
  ignore_errors: yes
  changed_when: false

- name: Install Python 3 using pyenv
  shell: "eval \"$(pyenv-init-full)\" && pyenv install {{ '-f' if python_needs_force_rebuild.rc != 0 }} {{ python_3_version }}"
  become: yes
  become_user: "{{ user }}"
  when: 'python_needs_force_rebuild.rc != 0 or python_3_version not in pyenv_version.stdout_lines'

- name: Purge all other Python versions
  shell: "eval \"$(pyenv-init-full)\" && pyenv versions | grep -v {{ pyenv_version }} | sed 's/^..//' | awk '/^[23]/ { print $1 }' | tee >(xargs -L1 -r pyenv uninstall -f)"
  args:
    executable: /bin/bash
  register: py_others
  become: yes
  become_user: "{{ user }}"
  changed_when: py_others.stdout_lines

- name: Get list of Python 3 utils installed
  shell: "eval \"$(pyenv-init-full)\" && pyenv shell {{ python_3_version }} && pip freeze --all | awk -F= '{ print $1 }'"
  register: py3_utils
  become: yes
  become_user: "{{ user }}"
  changed_when: false

- pacman: name=ffmpeg  # for yt-dlp

- name: Install Python 3 utilities
  shell: 'eval "$(pyenv-init-full)" && pyenv shell {{ python_3_version }} && pip install -U {{ item }}'
  with_items:
    - pip
    - virtualenv
    - virtualenvwrapper
    - astroid
    - pylint
    - twine
    - jupyter
    - ipython
    - flake8
    - line-profiler
    - memory-profiler
    - psutil
    - awscli
    - tox
    - pipdeptree
    - srt
    - hanzidentifier  # for srt lines-matching -m hanzidentifier -f hanzidentifier.has_chinese
    - yt-dlp
    - graphviz
    - tabulate
    - mutagen
    - black
    - certbot
    - gprof2dot
    - beets
    - codemod
    - whensthebus
    - csvprint
    - stapler
    - gsutil
    - s3cmd
    - ffsubsync
    - gmute
    - icdiff
    - habitual
    - chardet
    - diffoscope
    - get-cover-art
  become: yes
  become_user: "{{ user }}"
  when: 'not item.startswith("git+https://") and (item|basename) not in py3_utils.stdout_lines'

- name: Uninstall Python 3 utilities
  shell: 'eval "$(pyenv-init-full)" && pyenv shell {{ python_3_version }} && pip uninstall -y {{ item }}'
  with_items:
    - tzupdate
  become: yes
  become_user: "{{ user }}"
  when: '(item|basename) in py3_utils.stdout_lines'
