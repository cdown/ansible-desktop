{% if server %}
vm.panic_on_oom=1
kernel.panic=-1
{% else %}
kernel.panic=60
{% endif %}

kernel.panic_on_oops=1
kernel.sysrq=1
kernel.dmesg_restrict=0

{% if ansible_userspace_bits == "64" %}
kernel.pid_max=4194304
{% endif %}

# Print messages at KERN_WARNING and above. Make unspecified printk() calls
# use KERN_WARNING, since otherwise no stacktraces get printed to the console.
# This avoids console spew from KERN_INFO/KERN_NOTICE, while still ensuring
# that we can debug problems.
kernel.printk=5 4 1 5

# ...and now that we've done that, we can make debugging OOMs a little easier.
vm.oom_dump_tasks=1

# netsec
net.ipv4.conf.default.accept_source_route=0
net.ipv4.conf.default.rp_filter=2
net.ipv4.conf.all.rp_filter=2
net.ipv4.ip_forward={{ 1 if server else 0 }}
net.ipv6.conf.all.forwarding={{ 1 if server else 0 }}

vm.swappiness={{ 100 if root_on_ssd else 10 }}

{% if root_on_ssd and server %}
# Start writing at 15%, but allow the dirty pages to generally grow unbounded.
# This makes sense for Samba writes which can trivially be retried if something
# goes wrong, and are small enough to fit in RAM. The maximum amount of time to
# allow the dirty data to sit in RAM is 60 seconds. Unwanted on desktops since
# applications may stall on writing all of this out at once.
vm.dirty_background_ratio=15
vm.dirty_ratio=50
vm.dirty_expire_centisecs=6000
{% endif %}

{% if not root_on_ssd or uses_hdd %}
# Reduce number of seeks on HDD by preferring to keep metadata in RAM over data
vm.vfs_cache_pressure = 20
{% endif %}

{% if desktop or not root_on_ssd %}
# Avoid writeback storm for slow devices
# https://lwn.net/Articles/572911/
vm.dirty_bytes=50331648
vm.dirty_background_bytes=16777216
{% endif %}

# We pretty much always have the entirety of system memory filled with page
# cache. With such a slow disk and CPU, when we then need to cycle over those
# pages and the system is under high load, we simply stall and thrash since we
# can't reclaim fast enough. Boost the watermark scale factor to 1%.
vm.watermark_scale_factor=100

# If ICMP actually works (see docs for value 1), this won't kick in. No reason
# not to enable it, then.
net.ipv4.tcp_mtu_probing=1

# Scaled by default based on available physical memory, which may be way too
# small.
net.core.rmem_max=16777216
net.core.wmem_max=16777216
net.ipv4.tcp_rmem=4096 87380 16777216
net.ipv4.tcp_wmem=4096 65536 16777216

# Allow limited profiling access as unprivileged user
kernel.perf_event_paranoid=1
